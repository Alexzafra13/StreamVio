---
import '../styles/global.css';
import Navigation from '../components/Navigation';
import { AuthProvider } from '../context/AuthContext';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="StreamVio - Servicio de streaming multimedia" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-gray-900 text-white min-h-screen">
    <AuthProvider client:load>
      <Navigation client:load />
      <slot />
      <footer class="bg-gray-800 py-6 mt-12">
        <div class="container mx-auto px-4 text-center text-gray-400">
          <p>&copy; {new Date().getFullYear()} StreamVio. Todos los derechos reservados.</p>
        </div>
      </footer>
    </AuthProvider>

    <script>
      // MODIFICACIÓN: Script mejorado para manejar la autenticación en todas las páginas
      document.addEventListener('DOMContentLoaded', () => {
        // Verificar token
        const token = localStorage.getItem('streamvio_token');
        if (token) {
          // Configurar token para las solicitudes fetch
          const originalFetch = window.fetch;
          window.fetch = function(input, init) {
            init = init || {};
            init.headers = init.headers || {};
            init.headers['Authorization'] = `Bearer ${token}`;
            return originalFetch(input, init);
          };
          
          // Configurar renovación automática de token
          setupTokenRefresh();
        }

        // Escuchar eventos de autenticación
        window.addEventListener('streamvio-auth-change', () => {
          const newToken = localStorage.getItem('streamvio_token');
          if (!newToken && token) {
            // El usuario cerró sesión, recargar la página
            window.location.reload();
          } else if (newToken && !token) {
            // El usuario inició sesión, recargar la página
            window.location.reload();
          }
        });
        
        // Función para configurar renovación automática de token
        function setupTokenRefresh() {
          // Renovar el token cada 6 días (antes de que expire a los 7 días)
          const SIX_DAYS_MS = 6 * 24 * 60 * 60 * 1000;
          
          // Programar la primera renovación
          setTimeout(refreshToken, SIX_DAYS_MS);
          
          // Verificar cada hora si el token sigue siendo válido
          setInterval(checkToken, 60 * 60 * 1000);
        }
        
        // Función para renovar el token
        async function refreshToken() {
          try {
            const token = localStorage.getItem('streamvio_token');
            if (!token) return;
            
            const response = await fetch('/api/auth/refresh-token', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              
              // Guardar el nuevo token
              localStorage.setItem('streamvio_token', data.token);
              
              // Actualizar los datos del usuario si es necesario
              if (data.user) {
                localStorage.setItem('streamvio_user', JSON.stringify(data.user));
              }
              
              console.log('Token renovado exitosamente');
              
              // Programar la próxima renovación
              const SIX_DAYS_MS = 6 * 24 * 60 * 60 * 1000;
              setTimeout(refreshToken, SIX_DAYS_MS);
            } else {
              console.error('Error al renovar token:', await response.text());
            }
          } catch (error) {
            console.error('Error en la renovación automática del token:', error);
          }
        }
        
        // Función para verificar si el token sigue siendo válido
        async function checkToken() {
          const token = localStorage.getItem('streamvio_token');
          if (!token) return;
          
          try {
            // Hacer una petición a un endpoint seguro para verificar el token
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            if (!response.ok && response.status === 401) {
              // Token inválido o expirado, intentar renovarlo inmediatamente
              refreshToken();
            }
          } catch (error) {
            console.error('Error al verificar token:', error);
          }
        }
      });
    </script>
  </body>
</html>