---
// clients/web/src/pages/media/[id].astro - Página detallada de medio
import Layout from '../../layouts/Layout.astro';
import MediaViewer from '../../components/MediaViewer';

// Obtener ID del medio de los parámetros de ruta
const { id } = Astro.params;

// Imprescindible para rutas dinámicas en Astro
export async function getStaticPaths() {
  return [{ params: { id: 'placeholder' } }];
}
---

<Layout title="Detalles del medio">
  <main>
    <div class="max-w-6xl mx-auto">
      <a href="/media" class="inline-block mb-6 text-blue-500 hover:underline">&larr; Volver a la biblioteca</a>
      
      <div id="media-container" class="grid md:grid-cols-3 gap-8">
        <!-- Columna izquierda: Reproductor/Visor -->
        <div class="md:col-span-2">
          <MediaViewer mediaId={id} client:load />
        </div>
        
        <!-- Columna derecha: Info -->
        <div>
          <div id="media-info" class="bg-gray-800 rounded-lg p-6 mb-6">
            <h2 class="text-2xl font-bold mb-4" id="media-title">Cargando...</h2>
            <div id="media-details" class="text-gray-400">
              <p class="my-1" id="media-type"></p>
              <p class="my-1" id="media-resolution"></p>
              <p class="my-1" id="media-duration"></p>
              <p class="my-1" id="media-size"></p>
              <div id="media-additional" class="mt-3 pt-3 border-t border-gray-700 hidden">
                <p class="my-1" id="media-year"></p>
                <p class="my-1" id="media-genre"></p>
                <p class="my-1" id="media-director"></p>
                <p class="my-1" id="media-actors"></p>
                <p class="my-1" id="media-rating"></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import apiConfig from "../../config/api";
  
  // Usar la configuración correcta
  const API_URL = apiConfig.API_URL;

  document.addEventListener('DOMContentLoaded', async () => {
    // Verificar autenticación
    const token = localStorage.getItem('streamvio_token');
    if (!token) {
      window.location.href = '/auth?redirect=' + encodeURIComponent(window.location.pathname);
      return;
    }
    
    const mediaId = document.location.pathname.split('/').pop();
    
    try {
      // Cargar datos del medio
      const response = await fetch(`${API_URL}/api/media/${mediaId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Error al cargar datos del medio');
      }
      
      const mediaData = await response.json();
      
      // Actualizar UI con datos básicos
      document.getElementById('media-title').textContent = mediaData.title || 'Sin título';
      document.getElementById('media-type').textContent = formatMediaType(mediaData.type);
      
      if (mediaData.width && mediaData.height) {
        document.getElementById('media-resolution').textContent = `Resolución: ${mediaData.width}x${mediaData.height}`;
      }
      
      if (mediaData.duration) {
        document.getElementById('media-duration').textContent = `Duración: ${formatDuration(mediaData.duration)}`;
      }
      
      if (mediaData.size) {
        document.getElementById('media-size').textContent = `Tamaño: ${formatSize(mediaData.size)}`;
      }
      
      // Actualizar metadatos adicionales si existen
      const additionalContainer = document.getElementById('media-additional');
      let hasAdditionalInfo = false;
      
      if (mediaData.year) {
        document.getElementById('media-year').textContent = `Año: ${mediaData.year}`;
        hasAdditionalInfo = true;
      }
      
      if (mediaData.genre) {
        document.getElementById('media-genre').textContent = `Género: ${mediaData.genre}`;
        hasAdditionalInfo = true;
      }
      
      if (mediaData.director) {
        document.getElementById('media-director').textContent = `Director: ${mediaData.director}`;
        hasAdditionalInfo = true;
      }
      
      if (mediaData.actors) {
        document.getElementById('media-actors').textContent = `Reparto: ${mediaData.actors}`;
        hasAdditionalInfo = true;
      }
      
      if (mediaData.rating) {
        document.getElementById('media-rating').textContent = `Puntuación: ${mediaData.rating}/10`;
        hasAdditionalInfo = true;
      }
      
      // Mostrar sección de metadatos adicionales si hay información
      if (hasAdditionalInfo) {
        additionalContainer.classList.remove('hidden');
      }
      
      // Actualizar título de la página
      document.title = `${mediaData.title || 'Contenido'} | StreamVio`;
    } catch (error) {
      console.error('Error al cargar datos del medio:', error);
      document.getElementById('media-title').textContent = 'Error al cargar información';
      document.getElementById('media-type').textContent = 'No se pudo obtener la información del medio';
    }
  });
  
  // Función para formatear tipo de medio
  function formatMediaType(type) {
    const types = {
      'movie': 'Película',
      'series': 'Serie',
      'episode': 'Episodio',
      'music': 'Música',
      'photo': 'Foto'
    };
    
    return types[type] || type;
  }
  
  // Función para formatear duración
  function formatDuration(seconds) {
    if (!seconds) return 'Desconocida';
    
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    
    if (hours > 0) {
      return `${hours}h ${minutes}m ${remainingSeconds}s`;
    } else {
      return `${minutes}m ${remainingSeconds}s`;
    }
  }
  
  // Función para formatear tamaño
  function formatSize(bytes) {
    if (!bytes) return 'Desconocido';
    
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 B';
    
    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);
    if (i === 0) return `${bytes} ${sizes[i]}`;
    
    return `${(bytes / 1024 ** i).toFixed(2)} ${sizes[i]}`;
  }
</script>