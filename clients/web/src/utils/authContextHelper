// clients/web/src/utils/authContextHelper.js
/**
 * Este archivo proporciona funciones auxiliares para manejar la autenticación
 * en contextos donde el AuthContext de React no está disponible (SSR o fuera de un componente)
 */

/**
 * Obtiene el usuario actual del localStorage
 * @returns {Object|null} Datos del usuario o null si no hay usuario autenticado
 */
export const getCurrentUser = () => {
  if (typeof window === "undefined" || !window.localStorage) {
    return null;
  }

  try {
    const userStr = localStorage.getItem("streamvio_user");
    if (!userStr) return null;

    return JSON.parse(userStr);
  } catch (error) {
    console.error("Error al obtener usuario del localStorage:", error);
    return null;
  }
};

/**
 * Verifica si hay un usuario autenticado
 * @returns {boolean} true si hay un usuario autenticado
 */
export const isAuthenticated = () => {
  if (typeof window === "undefined" || !window.localStorage) {
    return false;
  }

  return !!localStorage.getItem("streamvio_token");
};

/**
 * Verifica si el usuario actual es administrador
 * @returns {boolean} true si el usuario es administrador
 */
export const isAdmin = () => {
  const user = getCurrentUser();
  return user && (user.isAdmin === true || user.is_admin === 1);
};

/**
 * Obtiene el token de autenticación
 * @returns {string|null} Token de autenticación o null si no hay token
 */
export const getAuthToken = () => {
  if (typeof window === "undefined" || !window.localStorage) {
    return null;
  }

  return localStorage.getItem("streamvio_token");
};

/**
 * Cierra la sesión del usuario
 */
export const logout = () => {
  if (typeof window === "undefined" || !window.localStorage) {
    return;
  }

  localStorage.removeItem("streamvio_token");
  localStorage.removeItem("streamvio_user");

  if (window.axios && window.axios.defaults && window.axios.defaults.headers) {
    delete window.axios.defaults.headers.common["Authorization"];
  }

  // Disparar evento personalizado
  window.dispatchEvent(new Event("streamvio-auth-change"));
};

export default {
  getCurrentUser,
  isAuthenticated,
  isAdmin,
  getAuthToken,
  logout,
};
